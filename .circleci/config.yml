version: 2.1
commands:
  persist-env:
    steps:
      - run: cat ${BASH_ENV} >> /tmp/.env
      - persist_to_workspace:
          root: /tmp
          paths:
            - .env
  attach-env:
    steps:
      - attach_workspace:
          at: /tmp
      - run: cat /tmp/.env >> ${BASH_ENV}

  check-skip:
    steps:
      - run:
          command: |
            if [[ $SKIP == true ]]
            then
              echo "No .go files or version were modified - skipping release" 
              circleci step halt
            fi

  setup-ssh-key:
    steps:
      - run:
          command: |
            chmod +x build-scripts/setup-ssh-keys.sh
            build-scripts/setup-ssh-keys.sh

  validate-release-version-was-incremented:
    steps:
      - run:
          command: |
            set +o errexit
            SKIP=true
            git diff --name-only HEAD~ HEAD | egrep -q "\.go$" && SKIP=false
            git diff --name-only HEAD~ HEAD | egrep -q "VERSION" && SKIP=false
            git log -1 HEAD --pretty=format:%s 2>/dev/null | egrep -q "force release" && SKIP=false
            echo "export SKIP=$SKIP" | tee -a ${BASH_ENV}
            if [[ "SKIP" == "false" ]]
            then
              .circleci/validate-release.sh
              exit $?
            fi

            exit 0

jobs:
  validate:
    docker:
      - image: cimg/go:1.24
    steps:
      - checkout
      - validate-release-version-was-incremented
      - persist-env
  test:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make testacc
  build:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make build
  release:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
#      - check-skip
      - checkout
      - setup-ssh-key
      - run:
          name: Set up GPG, Build, and Sign Release
          command: |
            set -e # Exit immediately if a command exits with a non-zero status
            echo "--- GPG and Build Setup Start ---"

            # 1. Create a temporary directory for the GPG keyring
            CI_GPG_TEMP_HOME="$(mktemp -d)" # Use a script-local variable for temp home
            echo "Setting up temporary GPG home: ${CI_GPG_TEMP_HOME}"
            # Set up a trap to clean up the temporary directory when this run step exits
            trap "echo 'Cleaning up temp GPG home: ${CI_GPG_TEMP_HOME}' && rm -rf \"${CI_GPG_TEMP_HOME}\"" EXIT
            echo "Cleanup trap set for ${CI_GPG_TEMP_HOME}"

            # 2. Import the private key from the Base64 secret variable into the temporary home
            echo "Importing private GPG key from Base64 secret variable..."
            DECODED_KEY_DATA=""
            # Assuming GPG_PRIVATE_KEY_CONTENT_B64 is your secret variable name
            if DECODED_KEY_DATA=$(printf "%s" "$GPG_PRIVATE_KEY_CONTENT_B64" | base64 --decode 2>/dev/null); then
              echo "Base64 decoding successful."
            else
              echo "ERROR: base64 --decode command failed. Check GPG_PRIVATE_KEY_CONTENT_B64 secret and base64 utility in image."
              exit 1
            fi

            if echo "$DECODED_KEY_DATA" | gpg --batch --yes --import --homedir "${CI_GPG_TEMP_HOME}"; then
              echo "Private GPG key imported successfully into temporary keyring."
            else
              echo "ERROR: GPG key import failed after base64 decode. The decoded data was not valid PGP."
              exit 1
            fi

            # Optional debug: Verify key listing in the temporary keyring
            # echo "Listing secret keys in temporary keyring:"
            # gpg --list-secret-keys --keyid-format LONG --homedir "${CI_GPG_TEMP_HOME}" || echo "Warning: Failed to list secret keys."

            # 3. Export environment variables that Make will use
            # These are set in the same shell environment that will run 'make'
            export GNUPGHOME="${CI_GPG_TEMP_HOME}" # GPG commands run by the script will use this
            export GPG_HOME="${CI_GPG_TEMP_HOME}"  # For the Makefile to pick up and pass to sign_release.sh
            if [ -n "$GPG_SIGN_KEY_ID" ]; then # GPG_SIGN_KEY_ID comes from CircleCI context
                export GPG_SIGN_KEY="$GPG_SIGN_KEY_ID" # For the Makefile to derive GPG_KEY_OPT
                echo "GPG_SIGN_KEY set to: (masked)" # Mask sensitive ID in logs
            else
                echo "Warning: GPG_SIGN_KEY_ID CI secret not found or empty. GPG may use default key if available."
            fi

            echo "GPG_HOME set to: ${GPG_HOME}" # This will be the temp path
            echo "--- GPG Setup Complete ---"

            # 4. Run the Full Release Build Pipeline
            echo "Starting 'make release' pipeline..." # Or 'make release' if that's your target
            echo "Current GPG_HOME for make (from env): '$GPG_HOME'" # Debug
            echo "Current GPG_SIGN_KEY for make (from env): '${GPG_SIGN_KEY:-<not_set>}'" # Debug

            # Pipe the GPG passphrase from the secret variable to Make's stdin
            # The passphrase will be consumed by sign_release.sh
            echo "$GPG_PASSPHRASE" | make release
            echo "--- 'make release' Pipeline Finished ---"
#     - run: bash .circleci/github-release.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - validate:
          context: terraform-release
#      - test:
#          context: terraform-acceptance
#          requires:
#            - valijate
#      - build:
#          context: terraform-release
#          filters:
#            branches:
#              ignore: master
#          requires:
#            - test
      - release:
          context: terraform-release
#          filters:
#            branches:
#              only: master
          requires:
#            - test
