version: 2.1
commands:
  persist-env:
    steps:
      - run: cat ${BASH_ENV} >> /tmp/.env
      - persist_to_workspace:
          root: /tmp
          paths:
            - .env
  attach-env:
    steps:
      - attach_workspace:
          at: /tmp
      - run: cat /tmp/.env >> ${BASH_ENV}

  check-skip:
    steps:
      - run:
          command: |
            if [[ $SKIP == true ]]
            then
              echo "No .go files or version were modified - skipping release" 
              circleci step halt
            fi

  setup-ssh-key:
    steps:
      - run:
          command: |
            chmod +x build-scripts/setup-ssh-keys.sh
            build-scripts/setup-ssh-keys.sh

  validate-release-version-was-incremented:
    steps:
      - run:
          command: |
            set +o errexit
            SKIP=true
            git diff --name-only HEAD~ HEAD | egrep -q "\.go$" && SKIP=false
            git diff --name-only HEAD~ HEAD | egrep -q "VERSION" && SKIP=false
            git log -1 HEAD --pretty=format:%s 2>/dev/null | egrep -q "force release" && SKIP=false
            echo "export SKIP=$SKIP" | tee -a ${BASH_ENV}
            if [[ "SKIP" == "false" ]]
            then
              .circleci/validate-release.sh
              exit $?
            fi

            exit 0

jobs:
  validate:
    docker:
      - image: cimg/go:1.24
    steps:
      - checkout
      - validate-release-version-was-incremented
      - persist-env
  test:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make testacc
  build:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make build
  release:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
#      - check-skip
      - checkout
      - setup-ssh-key
      - run:
          name: Set up GPG Environment for Release Signing
          command: |
            set -e
            echo "--- GPG Setup Start ---"

            # 1. Create a temporary directory for the GPG keyring
            CI_GPG_TEMP_HOME="$(mktemp -d)" # Use a different variable name to avoid confusion
            echo "Setting up temporary GPG home: ${CI_GPG_TEMP_HOME}"
            trap "echo 'Cleaning up temp GPG home...' && rm -rf \"${CI_GPG_TEMP_HOME}\"" EXIT

            # 2. Import the private key from the secret variable into the temporary home
            echo "Importing private GPG key from Base64 secret variable..."
            if echo "$GPG_PRIVATE_KEY_CONTENT_B64" | base64 --decode | gpg --batch --yes --import --homedir "${CI_GPG_TEMP_HOME}"; then
              echo "Private GPG key imported successfully."
            else
              echo "ERROR: GPG key import failed."
              exit 1
            fi

            # 3. Persist environment variables for subsequent steps by writing to $BASH_ENV
            # This makes GPG_HOME and GPG_SIGN_KEY available to the 'make' step
            echo "Exporting GPG environment variables to $BASH_ENV..."
            echo "export GNUPGHOME=\"${CI_GPG_TEMP_HOME}\"" >> $BASH_ENV
            echo "export GPG_HOME=\"${CI_GPG_TEMP_HOME}\"" >> $BASH_ENV # For the Makefile
            if [ -n "$GPG_SIGN_KEY_ID" ]; then # GPG_SIGN_KEY_ID comes from CircleCI context
                echo "export GPG_SIGN_KEY=\"$GPG_SIGN_KEY_ID\"" >> $BASH_ENV # For the Makefile
                echo "GPG_SIGN_KEY will be set to $GPG_SIGN_KEY_ID"
            else
                echo "Warning: GPG_SIGN_KEY_ID CI secret not found or empty."
            fi
            echo "--- GPG Setup Complete ---"
      - run:
          name: Run Full Release Build (make all or make release)
          command: |
            set -e
            echo "Starting 'make all' pipeline..."
            # Source BASH_ENV to ensure variables are set (though CircleCI usually does this)
            # if [ -f "$BASH_ENV" ]; then source "$BASH_ENV"; fi
            echo "Current GPG_HOME for make: '$GPG_HOME'" # Debug
            echo "Current GPG_SIGN_KEY for make: '$GPG_SIGN_KEY'" # Debug
            echo "$GPG_PASSPHRASE" | make all # Or 'make release'
#     - run: bash .circleci/github-release.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - validate:
          context: terraform-release
#      - test:
#          context: terraform-acceptance
#          requires:
#            - valijate
#      - build:
#          context: terraform-release
#          filters:
#            branches:
#              ignore: master
#          requires:
#            - test
      - release:
          context: terraform-release
#          filters:
#            branches:
#              only: master
          requires:
#            - test
