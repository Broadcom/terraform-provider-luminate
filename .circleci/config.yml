version: 2.1
commands:
  persist-env:
    steps:
      - run: cat ${BASH_ENV} >> /tmp/.env
      - persist_to_workspace:
          root: /tmp
          paths:
            - .env
  attach-env:
    steps:
      - attach_workspace:
          at: /tmp
      - run: cat /tmp/.env >> ${BASH_ENV}

  check-skip:
    steps:
      - run:
          command: |
            if [[ $SKIP == true ]]
            then
              echo "No .go files or version were modified - skipping release" 
              circleci step halt
            fi

  setup-ssh-key:
    steps:
      - run:
          command: |
            chmod +x build-scripts/setup-ssh-keys.sh
            build-scripts/setup-ssh-keys.sh

  validate-release-version-was-incremented:
    steps:
      - run:
          command: |
            set +o errexit
            SKIP=true
            git diff --name-only HEAD~ HEAD | egrep -q "\.go$" && SKIP=false
            git diff --name-only HEAD~ HEAD | egrep -q "VERSION" && SKIP=false
            git log -1 HEAD --pretty=format:%s 2>/dev/null | egrep -q "force release" && SKIP=false
            echo "export SKIP=$SKIP" | tee -a ${BASH_ENV}
            if [[ "SKIP" == "false" ]]
            then
              .circleci/validate-release.sh
              exit $?
            fi

            exit 0

jobs:
  validate:
    docker:
      - image: cimg/go:1.24
    steps:
      - checkout
      - validate-release-version-was-incremented
      - persist-env
  test:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make testacc
  build:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make build
  release:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
#      - check-skip
      - checkout
      - setup-ssh-key
      - run:
          name: Set up GPG Environment for Release Signing
          command: |
            set -e # Exit immediately if a command exits with a non-zero status
            echo "--- GPG Setup Start ---"

            # 1. Create a temporary directory for the GPG keyring
            export CI_GPG_HOME="$(mktemp -d)"
            echo "Setting up temporary GPG home: ${CI_GPG_HOME}"

            # Set up a trap to clean up the temporary directory even if the job fails
            # This ensures cleanup happens when *this run step* exits
            trap "echo 'Cleaning up temp GPG home...' && rm -rf \"${CI_GPG_HOME}\"" EXIT # Use double quotes for trap command
            echo "Cleanup trap set for ${CI_GPG_HOME}"

            # 2. Decode the Base64 private key and import it into the temporary home
            echo "Importing private GPG key from Base64 secret variable..."
            # Decode the Base64 content from $GPG_PRIVATE_KEY_CONTENT_B64
            # Then pipe the decoded ASCII-armored key to gpg --import
            # Use --homedir to tell gpg to use the temporary directory
            # --batch --yes prevents prompts
            # Ensure the correct base64 decode command is used (GNU: --decode, macOS: -D)
            # Assuming GNU base64 is available in the cimg/go image
            if echo "$GPG_PRIVATE_KEY_CONTENT_B64" | base64 --decode | gpg --batch --yes --import --homedir "${CI_GPG_HOME}"; then
              echo "Private GPG key imported successfully into temporary keyring."
            else
              echo "ERROR: GPG key import failed. Check GPG_PRIVATE_KEY_BASE64 secret and base64 decode command."
              exit 1
            fi

            # Optional debug: Verify key listing in the temporary keyring
            echo "Listing secret keys in temporary keyring:"
            gpg --list-secret-keys --keyid-format LONG --homedir "${CI_GPG_HOME}" || echo "Warning: Failed to list secret keys, but continuing."

            # 3. Set GNUPGHOME environment variable for subsequent GPG commands
            # This tells gpg (and gpg-agent if running) where to look for keyrings
            # This is necessary for the sign_release.sh script which executes 'gpg'
            export GNUPGHOME="${CI_GPG_HOME}"
            echo "Exported GNUPGHOME=${GNUPGHOME}"

            # 4. Set GPG_HOME environment variable for the Makefile
            # This overrides the default GPG_HOME in your Makefile for this run.
            # The Makefile passes this value as an argument to sign_release.sh.
            export GPG_HOME="${CI_GPG_HOME}"
            echo "Exported GPG_HOME=${GPG_HOME} for Makefile variables."

            # 5. Set GPG_SIGN_KEY environment variable for the Makefile
            # This overrides GPG_SIGN_KEY in Makefile, ensuring CI uses the intended key ID from secrets.
            # The Makefile's $(eval GPG_KEY_OPT...) will then use this value.
            if [ -n "$GPG_SIGN_KEY_ID" ]; then
                export GPG_SIGN_KEY="$GPG_SIGN_KEY_ID"
                echo "Exported GPG_SIGN_KEY=${GPG_SIGN_KEY} for Makefile."
            else
                echo "Warning: GPG_SIGN_KEY_ID CI secret not found or empty. Makefile may use its default GPG_SIGN_KEY or fail if none is default."
            fi
            echo "--- GPG Setup Complete ---"
      - run:
          name: Run Release Build (make all)
          command: |
            set -e
            echo "Starting 'make release' pipeline..."
            echo "$GPG_PASSPHRASE" | make all
#      - run: bash .circleci/github-release.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - validate:
          context: terraform-release
#      - test:
#          context: terraform-acceptance
#          requires:
#            - valijate
#      - build:
#          context: terraform-release
#          filters:
#            branches:
#              ignore: master
#          requires:
#            - test
      - release:
          context: terraform-release
#          filters:
#            branches:
#              only: master
          requires:
#            - test
