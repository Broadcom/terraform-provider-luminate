version: 2.1
commands:
  persist-env:
    steps:
      - run: cat ${BASH_ENV} >> /tmp/.env
      - persist_to_workspace:
          root: /tmp
          paths:
            - .env
  attach-env:
    steps:
      - attach_workspace:
          at: /tmp
      - run: cat /tmp/.env >> ${BASH_ENV}

  check-skip:
    steps:
      - run:
          command: |
            if [[ $SKIP == true ]]
            then
              echo "No .go files or version were modified - skipping release" 
              circleci step halt
            fi

  setup-ssh-key:
    steps:
      - run:
          command: |
            chmod +x build-scripts/setup-ssh-keys.sh
            build-scripts/setup-ssh-keys.sh

  validate-release-version-was-incremented:
    steps:
      - run:
          command: |
            set +o errexit
            SKIP=true
            git diff --name-only HEAD~ HEAD | egrep -q "\.go$" && SKIP=false
            git diff --name-only HEAD~ HEAD | egrep -q "VERSION" && SKIP=false
            git log -1 HEAD --pretty=format:%s 2>/dev/null | egrep -q "force release" && SKIP=false
            echo "export SKIP=$SKIP" | tee -a ${BASH_ENV}
            if [[ "SKIP" == "false" ]]
            then
              .circleci/validate-release.sh
              exit $?
            fi

            exit 0

jobs:
  validate:
    docker:
      - image: cimg/go:1.24
    steps:
      - checkout
      - validate-release-version-was-incremented
      - persist-env
  test:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make testacc
  build:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
      - checkout
      - setup-ssh-key
      - run: make build
  release:
    docker:
      - image: cimg/go:1.24
    steps:
      - attach-env
#      - check-skip
      - checkout
      - setup-ssh-key
      - run:
          name: Set up GPG Environment for Release Signing
          command: |
            set -e # Exit immediately if a command exits with a non-zero status

            # These environment variables ($GPG_PRIVATE_KEY_CONTENT_B64, $GPG_PASSPHRASE, $GPG_SIGN_KEY_ID)
            # are expected to be provided by the CircleCI context.

            echo "--- GPG Setup Start ---"

            # 1. Create a temporary directory for the GPG keyring
            export CI_GPG_HOME="$(mktemp -d)"
            echo "Setting up temporary GPG home: ${CI_GPG_HOME}"
            trap "echo 'Cleaning up temp GPG home...' && rm -rf \"${CI_GPG_HOME}\"" EXIT
            echo "Cleanup trap set for ${CI_GPG_HOME}"

            # 2. Decode the Base64 private key and import it into the temporary home
            echo "Importing private GPG key from Base64 secret variable..."
            DECODED_KEY_DATA=""
            # Use the corrected variable name GPG_PRIVATE_KEY_CONTENT_B64
            if DECODED_KEY_DATA=$(printf "%s" "$GPG_PRIVATE_KEY_CONTENT_B64" | base64 --decode 2>/dev/null); then
              echo "Base64 decoding successful (at least command ran)."
            else
              echo "ERROR: base64 --decode command failed. Check base64 utility and flags, or GPG_PRIVATE_KEY_CONTENT_B64 secret."
              exit 1
            fi

            echo "DEBUG: First 30 chars of decoded key data: ${DECODED_KEY_DATA:0:30}"

            if echo "$DECODED_KEY_DATA" | gpg --batch --yes --import --homedir "${CI_GPG_HOME}"; then
              echo "Private GPG key imported successfully into temporary keyring."
            else
              echo "ERROR: GPG key import failed after base64 decode. The decoded data was not valid PGP."
              exit 1
            fi

            echo "Listing secret keys in temporary keyring:"
            gpg --list-secret-keys --keyid-format LONG --homedir "${CI_GPG_HOME}" || echo "Warning: Failed to list secret keys, but continuing."

            export GNUPGHOME="${CI_GPG_HOME}"
            echo "Exported GNUPGHOME=${GNUPGHOME}"
            export GPG_HOME="${CI_GPG_HOME}"
            echo "Exported GPG_HOME=${GPG_HOME} for Makefile variables."
            if [ -n "$GPG_SIGN_KEY_ID" ]; then
                export GPG_SIGN_KEY="$GPG_SIGN_KEY_ID"
                echo "Exported GPG_SIGN_KEY=${GPG_SIGN_KEY} for Makefile."
            else
                echo "Warning: GPG_SIGN_KEY_ID CI secret not found or empty."
            fi
            echo "--- GPG Setup Complete ---"
      - run:
          name: Run Full Release Build (make all or make release)
          command: |
            set -e
            echo "Starting 'make all' pipeline..."
            # Source BASH_ENV to ensure variables are set (though CircleCI usually does this)
            # if [ -f "$BASH_ENV" ]; then source "$BASH_ENV"; fi
            echo "Current GPG_HOME for make: '$GPG_HOME'" # Debug
            echo "Current GPG_SIGN_KEY for make: '$GPG_SIGN_KEY'" # Debug
            echo "$GPG_PASSPHRASE" | make release
#     - run: bash .circleci/github-release.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - validate:
          context: terraform-release
#      - test:
#          context: terraform-acceptance
#          requires:
#            - valijate
#      - build:
#          context: terraform-release
#          filters:
#            branches:
#              ignore: master
#          requires:
#            - test
      - release:
          context: terraform-release
#          filters:
#            branches:
#              only: master
          requires:
#            - test
